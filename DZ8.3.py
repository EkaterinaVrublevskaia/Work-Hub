#3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
#Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
#Класс-исключение должен контролировать типы данных элементов списка.
#Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
#скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
#очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
#Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
#При этом работа скрипта не должна завершаться.
#1)

class InputError:

    def __init__(self, *args):
        self.my_l = []

    def method_number(self):
        while True:
            try:
                answer = input("Введите значения и нажмите Enter, для выхода напишите 'Q': ")
                if answer == 'Q' or answer == 'q':
                    break
                else:
                    self.my_l.append(int(answer))
                    print(f"Список {self.my_l}")
                    continue
            except:
                print(f"Ошибка. Недопустимые значения.")
        print(f"Список {self.my_l}")


d_z = InputError()
d_z.method_number()


#2)

class InputError(Exception):

    def __init__(self, txt):
        self.txt = txt


my_l = []
while True:
    try:
        answer = input("Введите значения и нажмите Enter, для выхода напишите 'Q': ")
        if answer == 'q' or answer == 'Q':
            break
        if not answer.isdigit():
            raise InputError("InputError")
        my_l.append(int(answer))
    except InputError as err:
        print(f"Ошибка. Недопустимые значения.")
    print(f"Список {my_l}")

print(f"Список {my_l}")

